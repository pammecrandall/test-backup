name: Continuous Integration

on:
  push:
    branches:
      - main
      - release-*
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.ref_name }}-ci
  cancel-in-progress: true

env:
  platforms: "linux/arm64, linux/amd64"

jobs:

  vars:
    name: Checks and variables
    runs-on: ubuntu-20.04
    outputs:
      sha: ${{ steps.vars.outputs.sha }}
      go_path: ${{ steps.vars.outputs.go_path }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true
      - name: Output Variables
        id: vars
        run: |
          echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "::set-output name=go_path::$(go env GOPATH)"
      - name: Check if go.mod and go.sum are up to date
        run: |
          go mod tidy && git diff --exit-code -- go.mod go.sum

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    needs: vars
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true
      - name: Run Tests
        run: make unit-test
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: cover-${{ needs.vars.outputs.sha }}.html
          path: ${{ github.workspace }}/cover.html
        if: always()

  njs-unit-tests:
    name: NJS Unit Tests
    runs-on: ubuntu-20.04
    needs: vars
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm --prefix ${{ github.workspace }}/internal/nginx/modules install
      - run: npm --prefix ${{ github.workspace }}/internal/nginx/modules test

  binary:
    name: Build Binary
    runs-on: ubuntu-20.04
    needs: vars
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true

      - name: Publish release on tag
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
              const ref = context.ref.split("/")[2]

              const releases = (await github.rest.repos.listReleases({
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                per_page: 100,
              })).data

              const draft_release = releases.find(release => release.draft && release.tag_name === ref)

              const update = await github.rest.repos.updateRelease({
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                release_id: draft_release.id,
                draft: false
              });
              console.log(`Release published: ${update.data.html_url}`)
              console.log(`Release notes: ${update.data.body}`)
        if: startsWith(github.ref, 'refs/tags/')

      - name: Download Syft
        uses: anchore/sbom-action/download-syft@v0.12.0

      - name: Build binary
        uses: goreleaser/goreleaser-action@v3
        with:
          version: latest
          args: ${{ startsWith(github.ref, 'refs/tags/') && 'release' || 'build --snapshot' }} --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: ${{ needs.vars.outputs.go_path }}
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
          AZURE_BUCKET_NAME: ${{ secrets.AZURE_BUCKET_NAME }}

      - name: Cache Artifacts
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-kubernetes-gateway-${{ github.run_id }}-${{ github.run_number }}

  build:
    name: Build Image
    runs-on: ubuntu-20.04
    needs: [vars, binary]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Fetch Cached Artifacts
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-kubernetes-gateway-${{ github.run_id }}-${{ github.run_number }}
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            name=ghcr.io/nginxinc/nginx-kubernetes-gateway
          tags: |
            type=semver,pattern={{version}}
            type=edge
            type=ref,event=pr
            type=ref,event=branch,suffix=-rc,enable=${{ startsWith(github.ref, 'refs/heads/release') }}

      - name: Build Docker Image
        uses: docker/build-push-action@v3
        with:
          file: build/Dockerfile
          context: '.'
          target: goreleaser
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ github.event_name != 'pull_request' && env.platforms || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          pull: true
          no-cache: ${{ github.event_name != 'pull_request' }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.7.1
        continue-on-error: true
        with:
          image-ref: ghcr.io/nginxinc/nginx-kubernetes-gateway:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-nginx-kubernetes-gateway.sarif'
          ignore-unfixed: 'true'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        continue-on-error: true
        with:
          sarif_file: 'trivy-results-nginx-kubernetes-gateway.sarif'
      - name: Upload Scan Results
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: 'trivy-results-nginx-kubernetes-gateway.sarif'
          path: 'trivy-results-nginx-kubernetes-gateway.sarif'
        if: always()
